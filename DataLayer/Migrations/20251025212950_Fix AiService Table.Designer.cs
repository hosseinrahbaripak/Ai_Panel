// <auto-generated />
using System;
using Ai_Panel.Persistence.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ai_Panel.Persistence.Migrations
{
    [DbContext(typeof(AiPanelContext))]
    [Migration("20251025212950_Fix AiService Table")]
    partial class FixAiServiceTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AiModelAiPlatform", b =>
                {
                    b.Property<int>("ModelsId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformsId")
                        .HasColumnType("int");

                    b.HasKey("ModelsId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("AiModelAiPlatform");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AiConfigGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("AiConfigOrder")
                        .HasColumnType("int");

                    b.Property<int>("AiModelId")
                        .HasColumnType("int");

                    b.Property<int?>("AiPlatformId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("FrequencyPenalty")
                        .HasColumnType("real");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTokens")
                        .HasColumnType("int");

                    b.Property<int>("N")
                        .HasColumnType("int");

                    b.Property<float>("PresencePenalty")
                        .HasColumnType("real");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<float>("TopP")
                        .HasColumnType("real");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AiConfigGroupId");

                    b.HasIndex("AiModelId");

                    b.HasIndex("AiPlatformId");

                    b.HasIndex("ContractTemplateId");

                    b.ToTable("AiConfigs");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiConfigGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AiConfigGroups");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("CachedInputPrice")
                        .HasColumnType("float");

                    b.Property<double?>("InputPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double?>("OutputPrice")
                        .HasColumnType("float");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AiModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDelete = false,
                            Title = "Open Ai"
                        },
                        new
                        {
                            Id = 2,
                            IsDelete = false,
                            ParentId = 1,
                            Title = "gpt-4o"
                        },
                        new
                        {
                            Id = 3,
                            IsDelete = false,
                            ParentId = 1,
                            Title = "gpt-4o-mini"
                        },
                        new
                        {
                            Id = 4,
                            IsDelete = false,
                            ParentId = 1,
                            Title = "o1"
                        },
                        new
                        {
                            Id = 5,
                            IsDelete = false,
                            ParentId = 1,
                            Title = "o1-mini"
                        },
                        new
                        {
                            Id = 6,
                            IsDelete = false,
                            ParentId = 1,
                            Title = "o3-mini"
                        },
                        new
                        {
                            Id = 7,
                            IsDelete = false,
                            ParentId = 1,
                            Title = "gpt-3.5-turbo"
                        },
                        new
                        {
                            Id = 8,
                            IsDelete = false,
                            Title = "groq"
                        },
                        new
                        {
                            Id = 9,
                            IsDelete = false,
                            ParentId = 8,
                            Title = "deepseek-r1-distill-llama-70b"
                        });
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiPlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AiPlatforms");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AiConfigGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AiConfigGroupId");

                    b.ToTable("AiServices");
                });

            modelBuilder.Entity("Ai_Panel.Domain.ApiRequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Header")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApiRequestLogs");
                });

            modelBuilder.Entity("Ai_Panel.Domain.ContractTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContractTemplates");
                });

            modelBuilder.Entity("Ai_Panel.Domain.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InnerMessage")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<Guid>("Token")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Ai_Panel.Domain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Ai_Panel.Domain.TestAiConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AiModelId")
                        .HasColumnType("int");

                    b.Property<string>("AiResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("EmbeddingCost")
                        .HasColumnType("float");

                    b.Property<bool>("FinalResponse")
                        .HasColumnType("bit");

                    b.Property<float>("FrequencyPenalty")
                        .HasColumnType("real");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTokens")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("N")
                        .HasColumnType("int");

                    b.Property<float>("PresencePenalty")
                        .HasColumnType("real");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RequestCost")
                        .HasColumnType("float");

                    b.Property<string>("Stop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SummarizationCost")
                        .HasColumnType("float");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<float>("TopP")
                        .HasColumnType("real");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AiModelId");

                    b.HasIndex("ContractTemplateId");

                    b.HasIndex("userId");

                    b.ToTable("TestAiConfigs");
                });

            modelBuilder.Entity("Ai_Panel.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ActiveCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Gender")
                        .HasMaxLength(150)
                        .HasColumnType("int");

                    b.Property<bool>("HasAccessToAiChat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremiumAccount")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserAiChatLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AiCouldResponse")
                        .HasColumnType("bit");

                    b.Property<string>("AiResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("EmbeddingCost")
                        .HasColumnType("float");

                    b.Property<double>("RequestCost")
                        .HasColumnType("float");

                    b.Property<double>("SummarizationCost")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserServiceId");

                    b.ToTable("UserAiChatLogs");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AiServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AiServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServices");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateLogout")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLogout")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("AiModelAiPlatform", b =>
                {
                    b.HasOne("Ai_Panel.Domain.AiModel", null)
                        .WithMany()
                        .HasForeignKey("ModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ai_Panel.Domain.AiPlatform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiConfig", b =>
                {
                    b.HasOne("Ai_Panel.Domain.AiConfigGroup", "AiConfigGroup")
                        .WithMany("AiConfig")
                        .HasForeignKey("AiConfigGroupId");

                    b.HasOne("Ai_Panel.Domain.AiModel", "AiModel")
                        .WithMany()
                        .HasForeignKey("AiModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ai_Panel.Domain.AiPlatform", "AiPlatform")
                        .WithMany("Configs")
                        .HasForeignKey("AiPlatformId");

                    b.HasOne("Ai_Panel.Domain.ContractTemplate", "ContractTemplate")
                        .WithMany("AiConfigs")
                        .HasForeignKey("ContractTemplateId");

                    b.Navigation("AiConfigGroup");

                    b.Navigation("AiModel");

                    b.Navigation("AiPlatform");

                    b.Navigation("ContractTemplate");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiModel", b =>
                {
                    b.HasOne("Ai_Panel.Domain.AiModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiService", b =>
                {
                    b.HasOne("Ai_Panel.Domain.AiConfigGroup", "AiConfigGroup")
                        .WithMany()
                        .HasForeignKey("AiConfigGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AiConfigGroup");
                });

            modelBuilder.Entity("Ai_Panel.Domain.ApiRequestLog", b =>
                {
                    b.HasOne("Ai_Panel.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ai_Panel.Domain.TestAiConfig", b =>
                {
                    b.HasOne("Ai_Panel.Domain.AiModel", "AiModel")
                        .WithMany()
                        .HasForeignKey("AiModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ai_Panel.Domain.ContractTemplate", "ContractTemplate")
                        .WithMany("TestAiConfigs")
                        .HasForeignKey("ContractTemplateId");

                    b.HasOne("Ai_Panel.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AiModel");

                    b.Navigation("ContractTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserAiChatLog", b =>
                {
                    b.HasOne("Ai_Panel.Domain.User", "User")
                        .WithMany("UserAiChatLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ai_Panel.Domain.UserService", "UserService")
                        .WithMany("UserAiChatLogs")
                        .HasForeignKey("UserServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserService");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserRole", b =>
                {
                    b.HasOne("Ai_Panel.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ai_Panel.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserService", b =>
                {
                    b.HasOne("Ai_Panel.Domain.AiService", "AiService")
                        .WithMany("UserService")
                        .HasForeignKey("AiServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ai_Panel.Domain.User", "User")
                        .WithMany("UserServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AiService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserSession", b =>
                {
                    b.HasOne("Ai_Panel.Domain.User", "Users")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiConfigGroup", b =>
                {
                    b.Navigation("AiConfig");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiPlatform", b =>
                {
                    b.Navigation("Configs");
                });

            modelBuilder.Entity("Ai_Panel.Domain.AiService", b =>
                {
                    b.Navigation("UserService");
                });

            modelBuilder.Entity("Ai_Panel.Domain.ContractTemplate", b =>
                {
                    b.Navigation("AiConfigs");

                    b.Navigation("TestAiConfigs");
                });

            modelBuilder.Entity("Ai_Panel.Domain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Ai_Panel.Domain.User", b =>
                {
                    b.Navigation("UserAiChatLogs");

                    b.Navigation("UserRoles");

                    b.Navigation("UserServices");

                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("Ai_Panel.Domain.UserService", b =>
                {
                    b.Navigation("UserAiChatLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
